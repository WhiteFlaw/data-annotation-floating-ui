stages: # 分段
  - deploy

variables:
  BUILDDIR: dist # 打包文件名
  PRODDIR: html # 线上文件名
  BACKUPDIR: dist_bak # 备份文件夹
  UPLOADDIR: /home/nginx #nginx前端部署文件夹

deploy-job:
  stage: deploy
  only:
    - /^release.*$/
  before_script:
    - echo "开始install--> build--> deploy 🔥🔥🔥"
    - whoami
    - pwd
    - echo ${PATH}
  script:
    - echo "开始install🔥🔥🔥"
    - if [ ! -d "./node_modules/" ];then   npm install --registry=https://registry.npmmirror.com/;   else   echo "缓存存在,跳过install"; fi
    - echo "完成install🔥🔥🔥"
    - - echo "开始代码打包💪💪💪"
    - npm run build:prod
    - echo "完成代码打包💪💪💪"
    - echo "发射到本地服务器✨✨✨"
    - rm -rf $UPLOADDIR/backup/dist_bak # 删除原有备份文件(仅在生产环境)
    - mv $UPLOADDIR/$PRODDIR/ $UPLOADDIR/backup/dist_bak/ # 删除原有文件 备份原本的代码(仅在生产环境)
    - cp -r ./$BUILDDIR/. $UPLOADDIR/$BUILDDIR # 将打包完成的文件复制到目标服务器
    - mv $UPLOADDIR/$BUILDDIR $UPLOADDIR/$PRODDIR # 将目标文件改为服务端真正文件
    - echo "前端文件完成更新👏👏👏"
    - systemctl restart nginx
    - echo "nginx 部署成功👏👏👏"
  after_script:
    - echo "完成install--> build--> deploy 🔥🔥🔥"

#remote-deploy-job:
#  stage: deploy
#  only:
#    - master
#  before_script:
#    - echo "发射到目标服务器✨✨✨"
#  script:
#    - echo "发射到目标服务器✨✨✨"
#    - sshpass -p $PASSWORD ssh -o StrictHostKeyChecking=no $USERNAME@$HOST rm -rf $UPLOADDIR/backup/$BACKUPDIR # 删除原有备份文件(仅在生产环境)
#    - sshpass -p $PASSWORD ssh -o StrictHostKeyChecking=no $USERNAME@$HOST mv $UPLOADDIR/$PRODDIR/ $UPLOADDIR/backup/$BACKUPDIR/ # 删除原有文件 备份原本的代码(仅在生产环境)
#    - sshpass -p $PASSWORD scp -o StrictHostKeyChecking=no -r ./$BUILDDIR/. $USERNAME@$HOST:$UPLOADDIR/dist # 将打包完成的文件复制到目标服务器
#    - sshpass -p $PASSWORD ssh -o StrictHostKeyChecking=no $USERNAME@$HOST mv $UPLOADDIR/dist $UPLOADDIR/$PRODDIR # 将目标文件改为服务端真正文件
#    - echo "完成更新👏👏👏"
#  after_script:
#    - echo "完成更新👏👏👏"
